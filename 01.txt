USE [NHMS]
GO
/****** Object:  StoredProcedure [dbo].[ApplyLeaveCreate]    Script Date: 7/4/2023 9:06:09 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [dbo].[ApplyLeaveCreate]
@EmployeeID bigint,
@LeaveFromDate date,
@LeaveFromTime time=null,
@LeaveToDate date,
@LeaveToTime time=null,
@LeaveCategoryID int,
@LeaveTypeID int,
@LeaveTypeT nvarchar(50),
@LeaveReason varchar(max),
@ApprovingAuthorityID bigint,
@IsAttachedDocumets bit,
@AttachDocUrls varchar(max)=null,
@StatusUpdatedBy varchar(50),
@Success int OUT,
@Msg varchar(300) out
AS
BEGIN
	BEGIN TRY
		SET @Success=0
		IF @LeaveFromDate<=@LeaveToDate
		BEGIN
			DECLARE @hours DECIMAL(18,0),@FLAG INT =1,@InTime time,@OutTime time
			declare @LeaveTypeLeave varchar(50)='L',@LeaveTypeTour varchar(50)='T'
			DECLARE @OfficeID int=(SELECT OfficeID FROM EmployeeDetail WHERE EmployeeID=@EmployeeID AND ISActive=1)
			
			select @InTime=InTime from OfficeTimingDetail where OfficeID=@OfficeID
			
			select @OutTime=OutTime from OfficeTimingDetail where OfficeID=@OfficeID
			
			--set @hours = floor(DATEDIFF(HOUR,@InTime,@OutTime))
			IF @LeaveFromTime IS NULL
				SELECT @LeaveFromTime=InTime,@LeaveToTime=OutTime FROM OfficeTimingDetail WHERE OfficeID=@OfficeID
			
			IF(select CategoryID from LeaveCategory where UPPER(CategoryName) LIKE 'FULL DAY')=@LeaveCategoryID AND (@LeaveTypeT=@LeaveTypeLeave or @LeaveTypeT=@LeaveTypeTour)
			BEGIN
				SET @LeaveFromTime=@InTime
				SET @LeaveToTime=@OutTime
			END
			ELSE IF(select CategoryID from LeaveCategory where UPPER(CategoryName) LIKE 'HALF PAY LEAVE')=@LeaveCategoryID AND @LeaveTypeT=@LeaveTypeLeave
			BEGIN
				IF @LeaveFromTime!=@InTime
					SET @FLAG=0
				SET @LeaveFromTime=@InTime
				SET @LeaveToTime=@OutTime
			END
			IF(select CategoryID from LeaveCategory where UPPER(CategoryName) LIKE 'HALF DAY')=@LeaveCategoryID AND (@LeaveTypeT=@LeaveTypeLeave or @LeaveTypeT=@LeaveTypeTour)
			BEGIN
				set @hours = FLOOR(DATEDIFF(HOUR,@InTime,@OutTime)*.50)
				SET @LeaveToTime=DATEADD(hour,@hours,@LeaveFromTime)
				
				IF @LeaveToTime>(SELECT OutTime FROM OfficeTimingDetail where ID=@OfficeID)
					SET @FLAG=0
			END
			ELSE IF(select CategoryID from LeaveCategory where UPPER(CategoryName) LIKE 'SHORT LEAVE')=@LeaveCategoryID AND @LeaveTypeT=@LeaveTypeLeave
			BEGIN
				set @hours = FLOOR(DATEDIFF(HOUR,@InTime,@OutTime)*.33)
				SET @LeaveToTime=DATEADD(hour,@hours,@LeaveFromTime)
				IF @LeaveToTime>(SELECT OutTime FROM OfficeTimingDetail where ID=@OfficeID)
					SET @FLAG=0
			END
			
		
			IF @FLAG=1
			BEGIN
				IF(NOT EXISTS(select EL.ID 
				from EmployeeLeaveApplication el,EmployeeLeaveApprovingDetail ed 
				where el.ID=ed.EmployeeLeaveID
				and Employeeid=@EmployeeID and ed.LeaveStatusID in(Select StatusID from LeaveStatus where CanApplyAgain=0)  
				and @LeaveCategoryID in(select CategoryID from LeaveCategory)
				and convert (date,@LeaveFromDate,103) between convert (date,LeaveFromDate,103) and convert (date,LeaveToDate,103)
				and (convert (time,@LeaveFromTime,103) between convert (time,LeaveFromTime,103) and convert (time,LeaveToTime,103)
				or convert (time,@LeaveToTime,103) between convert (time,LeaveFromTime,103) and convert (time,LeaveToTime,103))
				))
				BEGIN
					--DECLARE @HoursToAdd int
					--IF(EXISTS(select CategoryName from LeaveCategory where UPPER(CategoryName) LIKE 'HALF DAY'))
					--BEGIN
					--	SET @HoursToAdd=4 
					--END
					--ELSE IF(EXISTS(select CategoryName from LeaveCategory where UPPER(CategoryName) LIKE 'SHORT LEAVE'))
					--BEGIN
					--	SET @HoursToAdd=2 
					--END
		
					--SET @LeaveToTime=DATEADD(HOUR,@HoursToAdd,@LeaveFromTime)
					declare @LeaveCategoryName varchar(50)
					select @LeaveCategoryName=CategoryName from LeaveCategory where CategoryID=@LeaveCategoryID
				
					DECLARE @ApprovalCategoryID int=(select CategoryID from ApprovalCategoryDetail where CategoryLevel=1),
					@ApprovingLeaveID bigint
					BEGIN TRAN
						insert into EmployeeLeaveApplication(EmployeeID,LeaveCategoryID,LeaveTypeID,LeaveTourCode,LeaveFromDate,LeaveFromTime,LeaveToDate,LeaveToTime,LeaveReason,ApplyDatetime,AppovingAuthorityID,IsAttachedDocument,IsPending)
						values(@EmployeeID,@LeaveCategoryID,@LeaveTypeID,@LeaveTypeT,@LeaveFromDate,@LeaveFromTime,@LeaveToDate,@LeaveToTime,@LeaveReason,GETDATE(),@ApprovingAuthorityID,@IsAttachedDocumets,1)
		
						SET @ApprovingLeaveID=SCOPE_IDENTITY()
					
						INSERT INTO EmployeeLeaveApprovingDetail(EmployeeLeaveID,LeaveStatusID,ApprovalCategoryID,ApprovingLevel,StatusUpdatedBy,StatusUpdatedOn)
						VALUES(@ApprovingLeaveID,4,@ApprovalCategoryID,0,@EmployeeID,GETDATE())
						---- /*  Level =0 means Normal flow of leave approval except forward and step back */

						IF @IsAttachedDocumets=1
						BEGIN
							DECLARE @tblUrls TABLE(id int identity(1,1),UrlName varchar(15)) 
							INSERT INTO @tblUrls SELECT value FROM dbo.SplitString(@AttachDocUrls,',')
							DECLARE @count int=1

							WHILE(exists(SELECT id FROM @tblUrls))
							BEGIN
								DECLARE @UrlName varchar(15)=(SELECT UrlName FROM @tblUrls WHERE id=@count)
								INSERT INTO EmployeeLeaveAttachmentDetail(LeaveID,AttachmentUrl)
								VALUES(@ApprovingLeaveID,@UrlName)
								DELETE FROM @tblUrls WHERE id=@count
								SET @count=@count+1
							END
			
						END

						--ADD LEAVE BALANCE

						exec AttendanceLeaveBalanceCreate @ApprovingLeaveID,@LeaveFromDAte,@LeaveToDAte,@LeaveTypeID,@LeaveTypeT,@Employeeid,@LeaveReason,@LeaveCategoryName,@StatusUpdatedBy,@Success out,@Msg out
						
						if @Success=0 
						begin
							ROLLBACK TRAN
							RETURN
						end
						ELSE
							SET @Success=1
							SET @Msg='Leave applied successfully!'
					COMMIT TRAN
				END
				ELSE
				BEGIN
					SET @Msg='Leave already applied!'
					SET @Success=0
				END
			END
			ELSE
			BEGIN
				SET @Msg='Time mismatched with office hours!'
				SET @Success=0
			END
		END
		ELSE
		BEGIN
			SET @Msg='End time is less than from time!'
			SET @Success=0
		END
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN
		SET @Success=0
		SET @Msg=ERROR_MESSAGE()
	END CATCH
END